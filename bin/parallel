#!/usr/bin/env python

import os
import sys
import zipfile
import shutil

path = os.path.dirname(os.path.realpath(__file__))  + '/..'
sys.path.insert(0, path)

import common.imports.utils as u
import common.imports.constants as c


def group_exec_completed(applist, appcmdmap):
	

def get_group_map(type):
	if (sys.argv[1] == '-r') or (sys.argv[1] == '--random'):
		
	elif (sys.argv[1] == '-d') or (sys.argv[1] == '--defined'):
	

def get_runnable_instance_map():
	runnable_instance_map = {}
	for instance in os.listdir(c.PARALLEL_APP_INSTANCE_DIR):
		runnable_instance_map.update(u.getidcmdpairbyxml(c.PARALLEL_APP_INSTANCE_DIR + '/' + instance))
	return runnable_instance_map

def main():
	groupmap = get_group_map(sys.argv[1])
	if os.path.isdir(c.PARALLEL_STATS_DIR):
		os.rename(c.PARALLEL_STATS_DIR, c.PARALLEL_STATS_DIR + '.' + u.gettimestamp().replace(' ', '_'))

	os.mkdir(c.PARALLEL_STATS_DIR)
	runnable = get_runnable_instance_map()
	for groupid in groupmap.keys():
		time = u.gettimestamp().replace(' ', '_')
		u.loginfo('Executing group ' + groupid)
		os.mkdir(c.PARALLEL_STATS_DIR + '/' + groupid)
		for appid in groupmap[groupid]:
			u.loginfo('Executing app ' + runnable[appid])
			u.execcmd('touch ' + c.PARALLEL_STATS_DIR + '/' + groupid + '/' + str(appid) + '_' + time + '.stat')
			u.execcmd('echo ' + runnable[appid] + ' >> ' + c.PARALLEL_STATS_DIR + '/' + groupid + '/' + str(appid) + '_' + time + '.stat')
			u.execcmdbg('perf stat ' + runnable[appid] + ' >> ' + c.PARALLEL_STATS_DIR + '/' + groupid + '/' + str(appid) + '_' + time + '.stat 2>&1 ')
		while True:
			if group_exec_completed(groupmap[groupid], runnable):
				break
			else:
				time.sleep(10)

if __name__ == "__main__":
	c.LOGGER = 'parallel.log'
	main()
